and=Boolean Operations:\n\
AND test1 test2\n\
\n\
Description:\n\
Reports whether or not both given tests are true (non-zero) \n\
\n\
Parameters:\n\
test1 - any expression\n\
test2 - any expression\n\
\n\
Returns:\n\
1 if test1 and test2 are non-zero; 0 otherwise
atan=Math Operations:\n\
ATAN degrees\n\
\n\
Description:\n\
Calculates arctangent of given degrees\n\
\n\
Parameters:\n\
degrees - any expression\n\
\n\
Returns:\n\
Arctangent of degrees
backward=Turtle Commands:\n\
BACK pixels\n\
BK pixels\n\
\n\
Description:\n\
Moves turtle backward in its current heading by pixels distance\n\
\n\
Parameters:\n\
pixels - any expression\n\
\n\
Returns:\n\
Distance the turtle moved
cleanscreen=Turtle Commands:\n\
CLEANSCREEN\n\
CS\n\
\n\
Description:\n\
Erases turtle's trail and returns it to the home position\n\
\n\
Parameters:\n\
None\n\
\n\
Returns:\n\
Distance the turtle moved
cos=Math Operations:\n\
COS degrees\n\
\n\
Description:\n\
Calculates cosine of given degrees\n\
\n\
Parameters:\n\
degrees - any expression\n\
\n\
Returns:\n\
Cosine of degrees
difference=Math Operations:\n\
DIFFERENCE expr1 expr2\n\
- expr1 expr2\n\
\n\
Description:\n\
Calculates the second value subtracted from the first value\n\
\n\
Parameters:\n\
expr1 - any expression\n\
expr2 - any expression\n\
\n\
Returns:\n\
Difference of expr1 and expr2
dotimes=Control Structure Commands:\n\
DOTIMES [ variable limit ] [ command(s) ]\n\
\n\
Description:\n\
Runs command(s) for each value specified in the range, i.e., from (1 - limit) inclusive;\n\
variable is assigned to each succeeding value so that it can be accessed by the command(s)\n\
\n\
Parameters:\n\
variable - any variable name\n\
limit - any expression\n\
command(s) - any command\n\
\n\
Returns:\n\
Result of last command in the list executed; 0 if no commands are executed
equalp=Boolean Operations:\n\
EQUAL? expr1 expr2\n\
EQUALP expr1 expr2\n\
\n\
Description:\n\
Reports whether or not the given expressions result in the same value\n\
\n\
Parameters:\n\
expr1 - any expression\n\
expr2 - any expression\n\
\n\
Returns:\n\
1 if expr1 and expr2 are equal; 0 otherwise
for=Control Structure Commands:\n\
FOR [ variable start end increment ] [ command(s) ]\n\
\n\
Description:\n\
Runs command(s) for each value specified in the range, i.e., from (start - end), going by increment;\n\
variable is assigned to each succeeding value so that it can be accessed by the command(s).\n\
\n\
Parameters:\n\
variable - and variable name\n\
start - any expression\n\
end - any expression\n\
increment - any expression\n\
command(s) - any command\n\
\n\
Returns:\n\
Result of last command in the list executed; 0 if no commands are executed
forward=Turtle Commands:\n\
FORWARD pixels\n\
FD pixels\n\
\n\
Description:\n\
Moves turtle forward in its current heading by pixels distance\n\
\n\
Parameters:\n\
pixels - any expression\n\
\n\
Returns:\n\
Distance the turtle moved
greaterp=Boolean Operations:\n\
GREATER? expr1 expr2\n\
GREATERP expr1 expr2\n\
\n\
Description:\n\
Reports whether first expression is striclty greater than second expression\n\
\n\
Parameters:\n\
expr1 - any expression\n\
expr2 - any expression\n\
\n\
Returns:\n\
1 if expr1 is strictly greater than expr2; 0 otherwise
heading=Turtle Queries:\n\
HEADING\n\
\n\
Description:\n\
Reports turtle's current heading\n\
\n\
Parameters:\n\
None\n\
\n\
Returns:\n\
Turtle's heading in degrees
hideturtle=Turtle Commands:\n\
HIDETURTLE\n\
HT\n\
\n\
Description:\n\
Makes turtle invisible\n\
\n\
Parameters:\n\
None\n\
\n\
Returns:\n\
0
home=Turtle Commands:\n\
HOME\n\
\n\
Description:\n\
Moves turtle to the center of the screen (0 0)\n\
\n\
Parameters:\n\
None\n\
\n\
Returns:\n\
Distance the turtle moved
if=Control Structure Commands:\n\
IF expr [ command(s) ]\n\
\n\
Description:\n\
If expr is not 0, runs the command(s) given in the list\n\
\n\
Parameters:\n\
expr - any expression\n\
command(s) - any command\n\
\n\
Returns:\n\
Result of last command in the list executed; 0 if no commands are executed
ifelse=Control Structure Commands:\n\
IFELSE expr [ trueCommand(s) ] [ falseCommand(s) ]\n\
\n\
Description:\n\
If expr is not 0, runs the trueCommands given in the first list;\n\
otherwise runs the falseCommands given in the second list.\n\
\n\
Parameters:\n\
expr - any expression\n\
trueCommand(s) - any command\n\
falseCommand(s) - any command\n\
\n\
Returns:\n\
Result of last command in the list executed; 0 if no commands are executed
left=Turtle Commands:\n\
LEFT degrees\n\
LT degrees\n\
\n\
Description:\n\
Turns turtle counterclockwise by given angle\n\
\n\
Parameters:\n\
degrees - any expression\n\
\n\
Returns:\n\
Number of degress turtle turned
lessp=Boolean Operations:\n\
LESS? expr1 expr2\n\
LESSP expr1 expr2\n\
\n\
Description:\n\
Reports whether first expression is striclty less than second expression\n\
\n\
Parameters:\n\
expr1 - any expression\n\
expr2 - any expression\n\
\n\
Returns:\n\
1 if expr1 is strictly less than expr2; 0 otherwise
log=Math Operations:\n\
LOG expr\n\
\n\
Description:\n\
Calculates natural log of given value\n\
\n\
Parameters:\n\
expr - any expression\n\
\n\
Returns:\n\
Natural log of expr
make=Variable Commands:\n\
MAKE variable expr\n\
SET variable expr\n\
\n\
Description:\n\
Assigns the value of expr to given variable name, creating the variable if necessary\n\
\n\
Parameters:\n\
variable - name of variable\n\
expr - any expression\n\
\n\
Returns:\n\
Value of expr
minus=Math Operations:\n\
MINUS expr\n\
~ expr\n\
\n\
Description:\n\
Calculates the negation of the given value\n\
\n\
Parameters:\n\
expr - any expression\n\
\n\
Returns:\n\
Negative of the value of expr
not=Boolean Operations:\n\
NOT test\n\
\n\
Description:\n\
Reports logical opposite of given test\n\
\n\
Parameters:\n\
test - any expression\n\
\n\
Returns:\n\
1 if test is 0; 0 if test is non-zero
notequalp=Boolean Operations:\n\
NOTEQUAL? expr1 expr2\n\
NOTEQUALP expr1 expr2\n\
\n\
Description:\n\
Reports whether or not the two expressions result in different values\n\
\n\
Parameters:\n\
expr1 - any expression\n\
expr2 - any expression\n\
\n\
Returns:\n\
1 if expr1 and expr2 are not equal; 0 otherwise
or=Boolean Operations:\n\
OR test1 test2\n\
\n\
Description:\n\
Reports whether one or more of the given tests are true (non-zero)\n\
\n\
Parameters:\n\
test1 - any expression\n\
test2 - any expression\n\
\n\
Returns:\n\
1 if test1 or test2 are non-zero; 0 otherwise
pendown=Turtle Commands:\n\
PENDOWN\n\
PD\n\
\n\
Description:\n\
Puts pen down such that when the turtle moves, it leaves a trail\n\
\n\
Parameters:\n\
None\n\
\n\
Returns:\n\
1
pendownp=Turtle Queries:\n\
PENDOWN?\n\
PENDOWNP\n\
\n\
Description:\n\
Reports whether or not the turtle's pen is down\n\
\n\
Parameters:\n\
None\n\
\n\
Returns:\n\
1 if turtle's pen is down; 0 if pen is up
penup=Turtle Commands:\n\
PENUP\n\
PU\n\
\n\
Description:\n\
Puts pen up such that when the turtle moves, it does not leave a trail\n\
\n\
Parameters:\n\
None\n\
\n\
Returns:\n\
0
pi=Math Operations:\n\
PI\n\
\n\
Description:\n\
Reports mathematical value of PI (3.14159)\n\
\n\
Parameters:\n\
None\n\
\n\
Returns:\n\
The number PI
pow=Math Operations:\n\
POW base exponent\n\
\n\
Description:\n\
Calculates given base value raised to the power of the given exponent\n\
\n\
Parameters:\n\
base - any expression\n\
exponent - any expression\n\
\n\
Returns:\n\
Base raised to the power of the exponent
product=Math Operations:\n\
PRODUCT expr1 expr2\n\
* expr1 expr2\n\
\n\
Description:\n\
Calculates the first value multiplied by the second value\n\
\n\
Parameters:\n\
expr1 - any expression\n\
expr2 - any expression\n\
\n\
Returns:\n\
Multiplication of expr1 by expr2
quotient=Math Operations:\n\
QUOTIENT expr1 expr2\n\
/ expr1 expr2\n\
\n\
Description:\n\
Calculates the first value divided by the second value\n\
\n\
Parameters:\n\
expr1 - any expression\n\
expr2 - any expression\n\
\n\
Returns:\n\
Division of expr1 by expr2
random=Math Operations:\n\
RANDOM max\n\
\n\
Description:\n\
Calculates a random value between 0 and the given max\n\
\n\
Parameters:\n\
max - any expression\n\
\n\
Returns:\n\
Random non-negative number strictly less than max
remainder=Math Operations:\n\
REMAINDER expr1 expr2\n\
% expr1 expr2\n\
\n\
Description:\n\
Calculates the remainder after dividing the first value by the second value\n\
\n\
Parameters:\n\
expr1 - any expression\n\
expr2 - any expression\n\
\n\
Returns:\n\
Remainder after dividing expr1 by expr2
repeat=Control Structure Commands:\n\
REPEAT expr [ command(s) ]\n\
\n\
Description:\n\
Runs command(s) given in the list the value of expr number of times;\n\
the value of the current iteration, starting at 1, is automatically assigned to the variable, :repcount,\n\
so that it can be accessed by the command(s).\n\
\n\
Parameters:\n\
expr - any expression\n\
command(s) - any command\n\
\n\
Returns:\n\
Result of last command in the list executed; 0 if no commands are executed
right=Turtle Commands:\n\
RIGHT degrees\n\
RT degrees\n\
\n\
Description:\n\
Turns turtle clockwise by given angle\n\
\n\
Parameters:\n\
degrees - any expression\n\
\n\
Returns:\n\
Number of degress turtle turned
setheading=Turtle Commands:\n\
SETHEADING degrees\n\
SETH degrees\n\
\n\
Description:\n\
Turns turtle to an absolute heading\n\
\n\
Parameters:\n\
degrees - any expression\n\
\n\
Returns:\n\
Number of degrees turtle turned
setxy=Turtle Commands:\n\
SETXY x y\n\
GOTO x y\n\
\n\
Description:\n\
Moves turtle to given (x, y) position, where (0, 0) is the center of the screen\n\
\n\
Parameters:\n\
x - any expression\n\
y - any expression\n\
\n\
Returns:\n\
Distance the turtle moved
showingp=Turtle Queries:\n\
SHOWING?\n\
SHOWINGP\n\
\n\
Description:\n\
Reports whether or not the turtle is visible\n\
\n\
Parameters:\n\
None\n\
\n\
Returns:\n\
1 if turtle is showing; 0 if it is hiding
showturtle=Turtle Commands:\n\
SHOWTURTLE\n\
ST\n\
\n\
Description:\n\
Makes turtle visible\n\
\n\
Parameters:\n\
None\n\
\n\
Returns:\n\
1
sin=Math Operations:\n\
SIN degrees\n\
\n\
Description:\n\
Calculates sine of given degrees\n\
\n\
Parameters:\n\
degrees - any expression\n\
\n\
Returns:\n\
Sine of degrees
sum=Math Operations:\n\
SUM expr1 expr2\n\
+ expr1 expr2\n\
\n\
Description:\n\
Calculates the first value added to the second value\n\
\n\
Parameters:\n\
expr1 - any expression\n\
expr2 - any expression\n\
\n\
Returns:\n\
Sum of expr1 and expr2
tan=Math Operations:\n\
TAN degrees\n\
\n\
Description:\n\
Calculates tangent of given degrees\n\
\n\
Parameters:\n\
degrees - any expression\n\
\n\
Returns:\n\
Tangent of degrees
to=User-Defined Commands:\n\
TO commandName [ variable(s) ] [ command(s) ]\n\
\n\
Description:\n\
Assigns command(s) given in the second list to commandName using parameters given in first list as variables.\n\
When commandName is used later in a program, any given values are assigned to variables that can be accessed when the command list is run.\n\
\n\
Parameters:\n\
commandName - command name\n\
variable(s) - any variable name\n\
command(s) - any command\n\
\n\
Returns:\n\
1 if command is successfully defined; 0 otherwise
towards=Turtle Commands:\n\
TOWARDS x y\n\
\n\
Description:\n\
Turns turtle to face the given (x, y) point, where (0, 0) is the center of the screen\n\
\n\
Parameters:\n\
x - any expression\n\
y - any expression\n\
\n\
Returns:\n\
Number of degrees turtle turned
xcor=Turtle Queries:\n\
XCOR\n\
\n\
Description:\n\
Reports turtle's current x-coordinate, where (0, 0) is the center of the screen\n\
\n\
Parameters:\n\
None\n\
\n\
Returns:\n\
Turtle's x-coordinate
ycor=Turtle Queries:\n\
YCOR\n\
\n\
Description:\n\
Reports turtle's current y-coordinate, where (0, 0) is the center of the screen\n\
\n\
Parameters:\n\
None\n\
\n\
Returns:\n\
Turtle's y-coordinate

ask=Multiple Turtle Commands:\n\
ASK [ turtle(s) ] [  command(s) ]\n\
\n\
Description:\n\
Turtles given in first list all run commands given in the second list.\n\
After commands are run, currently active list of turtles returns to that set by the last TELL command (or default active turtle if TELL never given).\n\
\n\
Parameters:\n\
turtle(s) - any expression\n\
command(s) - any command\n\
\n\
Returns:\n\
Result of last command in the list executed; 0 if no commands are executed

askwith=Multiple Turtle Commands:\n\
ASKWITH [ condition ] [  command(s) ]\n\
\n\
Description:\n\
Turtles matching given condition run commands given in the second list.\n\
After commands are run, currently active list of turtles returns to that set by the last TELL command (or default active turtle if TELL never given).\n\
\n\
Parameters:\n\
condition - any condition\n\
command(s) - any command \n\
\n\
Returns:\n\
Result of last command in the list executed; 0 if no commands are executed

id=Multiple Turtle Commands:\n\
ID\n\
\n\
Description:\n\
Reports active turtle's unique number.\n\
\n\
Parameters:\n\
None\n\
\n\
Returns:\n\
Turtle's ID number

pencolor=Display Commands:\n\
PENCOLOR\n\
PC\n\
\n\
Description:\n\
Reports turtle's current pen color\n\
\n\
Parameters:\n\
None\n\
\n\
Returns:\n\
Turtle's current color as an index

setback=Display Commands:\n\
SETBACKGROUND index\n\
SETBG index\n\
\n\
Description:\n\
Sets background color of screen to that represented by index\n\
\n\
Parameters:\n\
index - any expression\n\
\n\
Returns:\n\
Given index

setpalette=Display Commands:\n\
SETPALETTE index r g b\n\
\n\
Description:\n\
Set color corresponding to given index to given r g b color values. Color component values are nonnegative integers less than 256 specifying an amount of red, green, and blue.\n\
\n\
Parameters:\n\
index - any expression\n\
r - any expression (with value between 0-255)\n\
g - any expression (with value between 0-255)\n\
b - any expression (with value between 0-255)\n\
\n\
Returns:\n\
Given index

setpencolor=Display Commands:\n\
SETPENCOLOR index\n\
SETPC index\n\
\n\
Description:\n\
Sets color of the pen to that represented by index\n\
\n\
Parameters:\n\
index - any expression\n\
\n\
Returns:\n\
Given index

setpensize=Display Commands:\n\
SETPENSIZE pixels\n\
SETPS pixels\n\
\n\
Description:\n\
Sets size of the pen to given pixels thickness\n\
\n\
Parameters:\n\
pixels - any expression\n\
\n\
Returns:\n\
Given pixels

setshape=Display Commands:\n\
SETSHAPE index\n\
SETSH index\n\
\n\
Description:\n\
Sets shape of turtle to that represented by index\n\
\n\
Parameters:\n\
index - any expression\n\
\n\
Returns:\n\
Given index

shape=Display Commands:\n\
SHAPE\n\
SH\n\
\n\
Description:\n\
Reports turtle's current shape\n\
\n\
Parameters:\n\
None\n\
\n\
Returns:\n\
Turtle's current shape as an index

tell=Multiple Turtle Commands:\n\
TELL [ turtle(s) ]\n\
\n\
Description:\n\
Sets turtles that will follow commands hereafter to the given list. If turtle has not previously existed, it is created and placed at the home location.\n\
\n\
Parameters:\n\
turtle(s) - any expression\n\
\n\
Returns:\n\
Last value in turtles list

turtles=Multiple Turtle Commands:\n\
TURTLES\n\
\n\
Description:\n\
Reports number of turtles created\n\
\n\
Parameters:\n\
None\n\
\n\
Returns:\n\
Number of turtles created

